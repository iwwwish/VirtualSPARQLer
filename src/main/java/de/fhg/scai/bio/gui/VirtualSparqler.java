/*
 * Copyright (C) 2014 Vishal Siramshetty <srmshtty[at]gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package de.fhg.scai.bio.gui;

import de.fhg.scai.bio.utils.PopupActionListener;
import de.fhg.scai.bio.interfaces.Mapping;
import de.fhg.scai.bio.interfaces.Prefix;
import de.fhg.scai.bio.interfaces.Property;
import de.fhg.scai.bio.interfaces.Resource;
import de.fhg.scai.bio.utils.D2RCommands;
import de.fhg.scai.bio.utils.PopupMouseListener;
import de.fhg.scai.bio.utils.Utility;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Vishal Siramshetty <srmshtty[at]gmail.com>
 */
public class VirtualSparqler extends javax.swing.JFrame {

    public static String mappingFilePath;
    public static List<String> connectionParameters;
    public static JPopupMenu prefixMenu;
    List<Prefix> prefixes;
    List<Property> properties;
    List<Resource> resources;

    /**
     * Creates new form VirtualSparqler
     */
    public VirtualSparqler() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outerPanel = new javax.swing.JPanel();
        newConnection = new javax.swing.JButton();
        addressBar = new javax.swing.JTextField();
        openConnection = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        queryPanel = new javax.swing.JPanel();
        execTimeLabel = new javax.swing.JLabel();
        executionTime = new javax.swing.JTextField();
        executeQuery = new javax.swing.JButton();
        saveQuery = new javax.swing.JButton();
        addPrefixes = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        queryScrollPane = new javax.swing.JScrollPane();
        queryArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        rpPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VirtualSPARQLer");
        setMinimumSize(new java.awt.Dimension(900, 625));

        outerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        newConnection.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        newConnection.setText("New Connection");
        newConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConnectionActionPerformed(evt);
            }
        });

        addressBar.setEditable(false);

        openConnection.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        openConnection.setText("Open Mapping");
        openConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openConnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outerPanelLayout = new javax.swing.GroupLayout(outerPanel);
        outerPanel.setLayout(outerPanelLayout);
        outerPanelLayout.setHorizontalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addComponent(openConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressBar)
                .addContainerGap())
        );
        outerPanelLayout.setVerticalGroup(
            outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outerPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(outerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newConnection)
                    .addComponent(addressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openConnection))
                .addGap(3, 3, 3))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        queryPanel.setBorder(null);

        execTimeLabel.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        execTimeLabel.setText("Execution Time:");

        executionTime.setEditable(false);
        executionTime.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N

        executeQuery.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        executeQuery.setText("Run");
        executeQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryActionPerformed(evt);
            }
        });

        saveQuery.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        saveQuery.setText("Save");
        saveQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveQueryActionPerformed(evt);
            }
        });

        addPrefixes.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        addPrefixes.setText("Add Prefix");
        addPrefixes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPrefixesActionPerformed(evt);
            }
        });

        jLabel1.setText("(sec)");

        javax.swing.GroupLayout queryPanelLayout = new javax.swing.GroupLayout(queryPanel);
        queryPanel.setLayout(queryPanelLayout);
        queryPanelLayout.setHorizontalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(execTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executionTime, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                .addComponent(addPrefixes, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(executeQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        queryPanelLayout.setVerticalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(execTimeLabel)
                    .addComponent(executionTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPrefixes)
                    .addComponent(executeQuery)
                    .addComponent(saveQuery)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        queryScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        queryArea.setColumns(20);
        queryArea.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        queryArea.setRows(5);
        queryArea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Query Editor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans Mono", 0, 12))); // NOI18N
        queryScrollPane.setViewportView(queryArea);

        resultArea.setEditable(false);
        resultArea.setColumns(20);
        resultArea.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12)); // NOI18N
        resultArea.setRows(5);
        resultArea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans Mono", 0, 12))); // NOI18N
        jScrollPane1.setViewportView(resultArea);

        rpPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout rpPanelLayout = new javax.swing.GroupLayout(rpPanel);
        rpPanel.setLayout(rpPanelLayout);
        rpPanelLayout.setHorizontalGroup(
            rpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );
        rpPanelLayout.setVerticalGroup(
            rpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(rpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queryPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(queryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
            .addComponent(rpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(outerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnectionActionPerformed
        ConnectionParameters params = new ConnectionParameters();
        params.setTitle("Create New Mapping");
        params.setVisible(true);
        params.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_newConnectionActionPerformed

    private void addPrefixesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPrefixesActionPerformed
        prefixMenu.show(addPrefixes, 0, addPrefixes.getHeight());
    }//GEN-LAST:event_addPrefixesActionPerformed

    private void openConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openConnectionActionPerformed
        File mappingFile = Utility.UI.getFile(getRootPane(), new FileNameExtensionFilter(" Mapping File (*.ttl) ", "ttl"));
        if (mappingFile.exists()) {

            rpPanel.revalidate();
            rpPanel.repaint();

            mappingFilePath = mappingFile.getAbsolutePath();

            loadPrefixes();
            loadPropertiesAndResources();
            addressBar.setText(mappingFile.getName());
        } else {
            Utility.UI.showInfoMessage(getRootPane(), "Problem reading the mapping file. Please check.");
        }

    }//GEN-LAST:event_openConnectionActionPerformed

    private void executeQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryActionPerformed

        if (queryArea.getText().isEmpty()) {
            Utility.UI.showInfoMessage(getRootPane(), "No query provided.");

        } else {
            setCursor(Cursor.WAIT_CURSOR);
            D2RCommands.executeQuery(mappingFilePath, queryArea.getText());
            resultArea.setText(D2RCommands.getQueryResult());
            resultArea.setCaretPosition(0);
            String execTime = String.valueOf(D2RCommands.getExecutionTime());
            executionTime.setText(execTime);
            setCursor(Cursor.DEFAULT_CURSOR);
        }

    }//GEN-LAST:event_executeQueryActionPerformed

    private void saveQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveQueryActionPerformed
        if (!queryArea.getText().trim().isEmpty() && !resultArea.getText().trim().isEmpty()) {
            D2RCommands.saveQueryResult(resultArea, getRootPane());
        } else {
            Utility.UI.showInfoMessage(getRootPane(), "No results to save!");
        }
    }//GEN-LAST:event_saveQueryActionPerformed

    private String getPrefix(String abbreviation) {
        for (Prefix pref : prefixes) {
            if (pref.getAbbreviation().equals(abbreviation)) {
                return pref.toString();
            }
        }
        return null;
    }

    private void loadPrefixes() {
        File mapFile = new File(mappingFilePath);
        Mapping mapping = new Mapping(mapFile);
        prefixes = mapping.getPrefixes();

        prefixMenu = new JPopupMenu();

        ActionListener actionListener = new PopupActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedPrefix = e.getActionCommand();
                String queryText = queryArea.getText();

                if (queryText.isEmpty()) {
                    queryArea.setText(getPrefix(selectedPrefix));
                } else {
                    if (queryText.contains(getPrefix(selectedPrefix))) {
                        String lines[] = queryText.split(System.getProperty("line.separator"));
                        StringBuilder queryBuilder = new StringBuilder();
                        for (String line : Arrays.asList(lines)) {
                            if (!line.contains(selectedPrefix)) {
                                queryBuilder.append(line).append("\n");
                            }
                        }
                        queryArea.setText(queryBuilder.toString().trim());

                    } else {
                        queryText = queryText + "\n" + getPrefix(selectedPrefix);
                        queryArea.setText(queryText);
                    }

                }
            }
        };

        for (Prefix pref : prefixes) {
            JCheckBoxMenuItem item = new JCheckBoxMenuItem(pref.getAbbreviation());
            item.addActionListener(actionListener);
            prefixMenu.add(item);
        }
    }

    private void loadPropertiesAndResources() {
        File mapFile = new File(mappingFilePath);
        Mapping mapping = new Mapping(mapFile);
        properties = mapping.getProperties();
        resources = mapping.getResources();

//******************************* Creating Property Tree ****************************
        DefaultMutableTreeNode prop_root = new DefaultMutableTreeNode("Properties");
        for (Property p : properties) {
            DefaultMutableTreeNode child = new DefaultMutableTreeNode(p.toString());
            prop_root.add(child);
        }
        final JTree prop_tree = new JTree(prop_root);
        prop_tree.setShowsRootHandles(true);
        prop_tree.putClientProperty("JTree.lineStyle", "Horizontal");
        prop_tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        JScrollPane prop_sp = new JScrollPane(prop_tree);
        prop_sp.setViewportView(prop_tree);

//******************************* Creating Resource Tree ****************************
        DefaultMutableTreeNode res_root = new DefaultMutableTreeNode("Resources");
        DefaultMutableTreeNode parent_child = null;

        for (Resource resource : resources) {
            if (resource.getType().equals(Resource.TYPE_ClassMap)) {
                parent_child = new DefaultMutableTreeNode(resource.toString());
                parent_child.setAllowsChildren(true);
                res_root.add(parent_child);
            }

            if (resource.getType().equals(Resource.TYPE_PropertyBridge) && parent_child != null) {
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(resource.toString());
                parent_child.add(child);
                parent_child.setAllowsChildren(true);
            } else {
                parent_child = res_root.getLastLeaf();
                parent_child.setAllowsChildren(true);
            }

        }

        final JTree res_tree = new JTree(res_root);
        res_tree.setShowsRootHandles(true);
        res_tree.putClientProperty("JTree.lineStyle", "Horizontal");
        for (int i = 0; i < res_tree.getRowCount(); i++) {
            res_tree.expandRow(i);
        }
        res_tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        JScrollPane res_sp = new JScrollPane(res_tree);
        res_sp.setViewportView(res_tree);

        ImageIcon leafIcon = new ImageIcon("images/blue.png");
        if (leafIcon != null) {
            DefaultTreeCellRenderer dtcr
                    = new DefaultTreeCellRenderer();
            dtcr.setLeafIcon(leafIcon);
            dtcr.setBackgroundNonSelectionColor(Color.WHITE);
            //dtcr.setBackgroundSelectionColor(Color.LIGHT_GRAY);
            dtcr.setTextSelectionColor(Color.BLACK);
            dtcr.setTextNonSelectionColor(Color.BLACK);

            res_tree.setCellRenderer(dtcr);
        } else {
            System.err.println("Leaf icon missing; using default.");
        }
//********************** Adding PopupListener to JTrees ************************        

        PopupActionListener res_actionListener = new PopupActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getActionCommand().equals("Copy")) {
                    DefaultMutableTreeNode selectedElement
                            = (DefaultMutableTreeNode) res_tree.getSelectionPath().getLastPathComponent();

                    StringSelection stringSelection = new StringSelection((String) selectedElement.getUserObject());

                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                }
            }
        };

        final JPopupMenu res_menu = new JPopupMenu();
        JMenuItem copyItem = new JMenuItem("Copy");
        res_menu.add(copyItem);
        copyItem.setActionCommand("Copy");
        copyItem.addActionListener(res_actionListener);

        PopupMouseListener res_menuListener = new PopupMouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    res_menu.show((Component) e.getSource(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    res_menu.show((Component) e.getSource(), e.getX(), e.getY());
                }
            }
        };

        res_tree.addMouseListener(res_menuListener);

        PopupActionListener prop_actionListener = new PopupActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getActionCommand().equals("Copy")) {
                    DefaultMutableTreeNode selectedElement
                            = (DefaultMutableTreeNode) prop_tree.getSelectionPath().getLastPathComponent();

                    StringSelection stringSelection = new StringSelection((String) selectedElement.getUserObject());
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                }
            }
        };

        final JPopupMenu prop_menu = new JPopupMenu();
        JMenuItem copyItem1 = new JMenuItem("Copy");
        prop_menu.add(copyItem1);
        copyItem1.setActionCommand("Copy");
        copyItem1.addActionListener(prop_actionListener);

        PopupMouseListener prop_menuListener = new PopupMouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    prop_menu.show((Component) e.getSource(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    prop_menu.show((Component) e.getSource(), e.getX(), e.getY());
                }
            }
        };

        prop_tree.addMouseListener(prop_menuListener);

//******************************* Creating SplitPane ***************************
        JSplitPane rpSplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        rpSplitPane.setBottomComponent(prop_sp);
        rpSplitPane.setTopComponent(res_sp);
        rpSplitPane.setDividerLocation(320);
        rpPanel.setLayout(new BorderLayout());
        rpPanel.add(BorderLayout.CENTER, rpSplitPane);

    }

    public static void testConnection(java.awt.event.ActionEvent evt) {
        System.out.println(connectionParameters.toString());
        if (!connectionParameters.isEmpty()) {
            System.out.println("Fetched Connection Parameters. Need to check the validity.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.installLookAndFeel("SeaGlass", "com.seaglasslookandfeel.SeaGlassLookAndFeel");
            UIManager.setLookAndFeel("com.seaglasslookandfeel.SeaGlassLookAndFeel");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            System.err.println("Seaglass LAF not available using Ocean.");
            try {
                UIManager.setLookAndFeel(new MetalLookAndFeel());
            } catch (UnsupportedLookAndFeelException e2) {
                System.err.println("Unable to use Ocean LAF using default.");
            }
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VirtualSparqler sparqler = new VirtualSparqler();
                sparqler.setVisible(true);
                GraphicsConfiguration gc = sparqler.getGraphicsConfiguration();
                Rectangle bounds = gc.getBounds();
                Dimension size = sparqler.getPreferredSize();
                sparqler.setLocation((int) ((bounds.width / 2) - (size.getWidth() / 2)),
                        (int) ((bounds.height / 2) - (size.getHeight() / 2)));
                sparqler.addWindowListener(new WindowListener() {

                    @Override
                    public void windowOpened(WindowEvent e) {
                    }

                    @Override
                    public void windowClosing(WindowEvent e) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        JOptionPane closing = new JOptionPane();

                        int selectedOption = closing.showConfirmDialog(closing, "Are you sure you want to close Virtual SPARQLer?",
                                "Virtual SPARQLer",
                                JOptionPane.YES_NO_OPTION);
                        // if choosen Yes, then the application will be closed
                        if (selectedOption == JOptionPane.YES_OPTION) {
                            System.exit(0);
                        }
                    }

                    @Override
                    public void windowClosed(WindowEvent e) {
                    }

                    @Override
                    public void windowIconified(WindowEvent e) {
                    }

                    @Override
                    public void windowDeiconified(WindowEvent e) {
                    }

                    @Override
                    public void windowActivated(WindowEvent e) {
                    }

                    @Override
                    public void windowDeactivated(WindowEvent e) {
                    }

                });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPrefixes;
    private javax.swing.JTextField addressBar;
    private javax.swing.JLabel execTimeLabel;
    private javax.swing.JButton executeQuery;
    private javax.swing.JTextField executionTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newConnection;
    private javax.swing.JButton openConnection;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JTextArea queryArea;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JScrollPane queryScrollPane;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JPanel rpPanel;
    private javax.swing.JButton saveQuery;
    // End of variables declaration//GEN-END:variables
}
